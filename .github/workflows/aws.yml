name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: us-east-1                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: 440191216921.dkr.ecr.us-east-1.amazonaws.com/repo          # set this to your Amazon ECR repository name
  ECS_SERVICE: testservice                  # set this to your Amazon ECS service name
  ECS_CLUSTER: testfg                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: td.json # set this to the path to your Amazon ECS task definition
  ECR: 440191216921.dkr.ecr.us-east-1.amazonaws.com/repo                                             # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: tz           # set this to the name of the container in the
  TAG: test                                             # containerDefinitions section of your task definition
  IMAGE_NAME: go
permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: test

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    #- name: Login to Amazon ECR
      #id: login-ecr
      #uses: aws-actions/amazon-ecr-login@v1
    - name: Login to ECR
      uses: docker/login-action@v2
      with:
          registry: 440191216921.dkr.ecr.us-east-1.amazonaws.com
          
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
            ${{ runner.os }}-buildx-
      #------
    - name: Build and push image
      id: build-image
      uses: docker/build-push-action@v4
      with:
         #registry: ${{ steps.login-ecr.outputs.registry }}
         #repository: ${{ env.ECR_REPOSITORY }}
         #tags: ${{ env.ECR }}/${{ env.CONTAINER_NAME }}:${{ env.TAG }}
         #tags: ${{ env.ECR }}/:${{ env.TAG }}
          tags: ${{ env.ECR }}/${{ env.IMAGE_NAME }}:${{ env.TAG }}
          outputs: type=docker
          
          add_git_labels: true
          push: false
          #tags: ${{ github.sha }}
          tag_with_ref: true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
       
               
    - name: List images
      run: docker images
    - name: Push manually
      #run: docker push ${{ env.ECR }}/${{ env.CONTAINER_NAME }}:${{ env.TAG }}
      #run: docker push ${{ env.ECR }}:${{ env.TAG }}   
      run: docker push ${{ env.ECR }}/${{ env.IMAGE_NAME }}:${{ env.TAG }} 

#------------------
    #- name: Build, tag, and push image to Amazon ECR
     # id: build-image
      #env:
       # ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        #IMAGE_TAG: ${{ github.sha }}
      #run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        # docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
       # docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
    
        # docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        #docker push $ECR_REPOSITORY:$IMAGE_TAG
        #echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT








    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
